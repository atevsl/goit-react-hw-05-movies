{"version":3,"file":"static/js/726.04d830a8.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.js","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.js","pages/Movies/Movies.js","services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__yjDCC\",\"listItem\":\"MovieList_listItem__vOVoz\",\"listLink\":\"MovieList_listLink__EbNXd\"};","import css from './MovieList.module.css';\nimport { useLocation, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport noImg from '../../img/noImg.jpg';\n\nconst MovieList = ({ moviesList }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={css.list}>\n      {moviesList.map(movie => {\n        return (\n          <li key={movie.id} className={css.listItem}>\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n              className={css.listLink}\n            >\n              {movie.poster_path && (\n                <img\n                  src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2${movie.poster_path}`}\n                  alt={movie.title}\n                  width=\"200px\"\n                />\n              )}\n              {!movie.poster_path && (\n                <img src={noImg} alt={movie.title} width=\"200px\" />\n              )}\n              <p>{movie.title}</p>\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default MovieList;\n\nMovieList.propTypes = {\n  moviesList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchBtn\":\"SearchForm_searchBtn__rp2a7\",\"searchInput\":\"SearchForm_searchInput__h6REp\"};","import PropTypes from 'prop-types';\nimport css from './SearchForm.module.css';\n\nconst SearchForm = ({ onSubmitHendler }) => {\n  return (\n    <>\n      <form\n        name=\"form\"\n        onSubmit={e => {\n          e.preventDefault();\n          onSubmitHendler(document.forms.form.elements.search.value);\n        }}\n      >\n        <input type=\"text\" name=\"search\" className={css.searchInput} />\n        <button type=\"submit\" className={css.searchBtn}>\n          Search\n        </button>\n      </form>\n    </>\n  );\n};\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmitHendler: PropTypes.func.isRequired,\n};\n","import SearchForm from 'components/SearchForm/SearchForm';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport { onFetchSearch } from 'services/API';\nimport { useEffect, useState } from 'react';\nimport Spiner from 'components/Spiner/Spiner';\nimport Notiflix from 'notiflix';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('search') ?? '';\n\n  const onSubmitHendler = search => {\n    if (search.trim() === '') {\n      return Notiflix.Notify.failure('Please type search and try again.');\n    }\n    setSearchParams({ search });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await onFetchSearch(query);\n        setSearchMovies(data);\n      } catch (error) {\n        Notiflix.Notify.failure(\n          'Sorry, we did not find this movie. Please repeat the search'\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmitHendler={onSubmitHendler} />\n      {isLoading && <Spiner wrapperStyle={{ fill: '#7b81ec' }} />}\n      {searchMovies && <MovieList moviesList={searchMovies} />}\n      <Outlet />\n    </>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst APIkey = '34c962a38697839d2de5b0a80a471826';\n\nasync function onFetch() {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\nasync function onFetchSearch(search) {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${APIkey}&query=${search}`\n  );\n\n  if (resp.status !== 200 || resp.data.total_results === 0) {\n    throw new Error();\n  } else return resp.data.results;\n}\nasync function onFetchFilm(id) {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${APIkey}`\n  );\n  return resp.data;\n}\n\nasync function onFetchCast(id) {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIkey}`\n  );\n  return resp.data.cast;\n}\n\nasync function onFetchReviews(id) {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\n\nexport { onFetch, onFetchFilm, onFetchCast, onFetchReviews, onFetchSearch };\n"],"names":["moviesList","location","useLocation","className","css","map","movie","to","id","state","from","poster_path","src","alt","title","width","noImg","onSubmitHendler","name","onSubmit","e","preventDefault","document","forms","form","elements","search","value","type","useState","searchMovies","setSearchMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchData","onFetchSearch","data","Notiflix","trim","Spiner","wrapperStyle","fill","MovieList","APIkey","onFetch","axios","resp","results","status","total_results","Error","onFetchFilm","onFetchCast","cast","onFetchReviews"],"sourceRoot":""}