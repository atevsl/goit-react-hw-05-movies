{"version":3,"file":"static/js/495.11fad279.chunk.js","mappings":"sPACA,EAA2B,uBAA3B,EAA6D,uB,oCC6D7D,EAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAYX,GAFjB,UAGD,KADPY,EAFQ,yDAMdR,EAAQQ,GANM,gDAQdJ,EAAS,EAAD,IARM,yBAUdF,GAAa,GAVC,4EAAH,qDAafI,GACD,GAAE,CAACV,KAGF,gCACGK,IAAa,SAACQ,EAAA,EAAD,CAAQC,aAAc,CAAEC,KAAM,aAC3CR,IAAS,SAACS,EAAA,QAAD,IACO,IAAhBb,EAAKc,SAAgB,4DACtB,eAAIC,UAAWC,EAAf,SACGhB,EAAKiB,KAAI,SAAAC,GACR,OACE,gBAAuBH,UAAWC,EAAlC,UACGE,EAAKC,eACJ,gBACEC,IAAG,6DAAwDF,EAAKC,cAChEE,IAAKH,EAAKI,KACVC,MAAM,WAGRL,EAAKC,eACL,gBAAKC,IAAKI,EAAOH,IAAKH,EAAKI,KAAMC,MAAM,WAEzC,wBACE,uBAAIL,EAAKI,UAEX,uCAAeJ,EAAKO,eAdbP,EAAKQ,QAiBjB,QAIR,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__hbalY\",\"castItem\":\"Cast_castItem__XA6Qz\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { onFetchCast } from 'services/API';\nimport css from './Cast.module.css';\nimport noImg from '../../img/noImg.jpg';\nimport Spiner from 'components/Spiner/Spiner';\nimport PageNotFound from 'components/PageNotFound/PageNotFound';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchCast = async () => {\n      try {\n        const data = await onFetchCast(movieId);\n        if (data === 0) {\n          return;\n        }\n        setCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Spiner wrapperStyle={{ fill: '#7b81ec' }} />}\n      {error && <PageNotFound />}\n      {cast.length === 0 && <b>Sorry we couldn't find the cast</b>}\n      <ul className={css.castList}>\n        {cast.map(item => {\n          return (\n            <li key={item.cast_id} className={css.castItem}>\n              {item.profile_path && (\n                <img\n                  src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2${item.profile_path}`}\n                  alt={item.name}\n                  width=\"200px\"\n                />\n              )}\n              {!item.profile_path && (\n                <img src={noImg} alt={item.name} width=\"200px\" />\n              )}\n              <p>\n                <b>{item.name}</b>\n              </p>\n              <p>Character: {item.character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default Cast;\n"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","useEffect","fetchCast","onFetchCast","data","Spiner","wrapperStyle","fill","PageNotFound","length","className","css","map","item","profile_path","src","alt","name","width","noImg","character","cast_id"],"sourceRoot":""}